{"name": "test_constructor_page", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'using' must be a string\n  (Session info: chrome=128.0.6613.120)\nStacktrace:\n0   chromedriver                        0x0000000104a77998 cxxbridge1$str$ptr + 1887096\n1   chromedriver                        0x0000000104a6fe00 cxxbridge1$str$ptr + 1855456\n2   chromedriver                        0x0000000104674be0 cxxbridge1$string$len + 89508\n3   chromedriver                        0x00000001046b88e8 cxxbridge1$string$len + 367276\n4   chromedriver                        0x00000001046f24a4 cxxbridge1$string$len + 603752\n5   chromedriver                        0x00000001046ada08 cxxbridge1$string$len + 322508\n6   chromedriver                        0x00000001046ae66c cxxbridge1$string$len + 325680\n7   chromedriver                        0x0000000104a3e058 cxxbridge1$str$ptr + 1651256\n8   chromedriver                        0x0000000104a4298c cxxbridge1$str$ptr + 1669996\n9   chromedriver                        0x0000000104a231ec cxxbridge1$str$ptr + 1541068\n10  chromedriver                        0x0000000104a4325c cxxbridge1$str$ptr + 1672252\n11  chromedriver                        0x0000000104a14800 cxxbridge1$str$ptr + 1481184\n12  chromedriver                        0x0000000104a610f8 cxxbridge1$str$ptr + 1794776\n13  chromedriver                        0x0000000104a61274 cxxbridge1$str$ptr + 1795156\n14  chromedriver                        0x0000000104a6fa9c cxxbridge1$str$ptr + 1854588\n15  libsystem_pthread.dylib             0x00000001a57b426c _pthread_start + 148\n16  libsystem_pthread.dylib             0x00000001a57af08c thread_start + 8", "trace": "setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"308997244266d4a4941b1442fbc5ae03\")>\n\n    def test_constructor_page(setup):\n        login_page = LoginPage(setup)\n>       login_page.click_constructor()\n\ntests/test_constructor_page.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npage_objects/login_page.py:32: in click_constructor\n    self.driver.find_element(LoginPageLocators.CONSTRUCTOR_BUTTON).click()\nvenv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x106525f70>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: \\'using\\' must be a string...0001a57b426c _pthread_start + 148\\\\n16  libsystem_pthread.dylib             0x00000001a57af08c thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'using' must be a string\nE         (Session info: chrome=128.0.6613.120)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000104a77998 cxxbridge1$str$ptr + 1887096\nE       1   chromedriver                        0x0000000104a6fe00 cxxbridge1$str$ptr + 1855456\nE       2   chromedriver                        0x0000000104674be0 cxxbridge1$string$len + 89508\nE       3   chromedriver                        0x00000001046b88e8 cxxbridge1$string$len + 367276\nE       4   chromedriver                        0x00000001046f24a4 cxxbridge1$string$len + 603752\nE       5   chromedriver                        0x00000001046ada08 cxxbridge1$string$len + 322508\nE       6   chromedriver                        0x00000001046ae66c cxxbridge1$string$len + 325680\nE       7   chromedriver                        0x0000000104a3e058 cxxbridge1$str$ptr + 1651256\nE       8   chromedriver                        0x0000000104a4298c cxxbridge1$str$ptr + 1669996\nE       9   chromedriver                        0x0000000104a231ec cxxbridge1$str$ptr + 1541068\nE       10  chromedriver                        0x0000000104a4325c cxxbridge1$str$ptr + 1672252\nE       11  chromedriver                        0x0000000104a14800 cxxbridge1$str$ptr + 1481184\nE       12  chromedriver                        0x0000000104a610f8 cxxbridge1$str$ptr + 1794776\nE       13  chromedriver                        0x0000000104a61274 cxxbridge1$str$ptr + 1795156\nE       14  chromedriver                        0x0000000104a6fa9c cxxbridge1$str$ptr + 1854588\nE       15  libsystem_pthread.dylib             0x00000001a57b426c _pthread_start + 148\nE       16  libsystem_pthread.dylib             0x00000001a57af08c thread_start + 8\n\nvenv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: InvalidArgumentException"}, "start": 1725816731136, "stop": 1725816731138, "uuid": "4683273f-7a36-42d8-a40d-fb38d91b009f", "historyId": "bd67605ef9d685e9d2b7d25272ce8cbf", "testCaseId": "bd67605ef9d685e9d2b7d25272ce8cbf", "fullName": "tests.test_constructor_page#test_constructor_page", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_constructor_page"}, {"name": "host", "value": "MacBook-Air-Anna.local"}, {"name": "thread", "value": "14668-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_constructor_page"}]}